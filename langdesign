Expression

  In bit language we use expressions and comments to write
down simple accounting events. Each expression have a strict
schema starting with a COMMAND keyword, followed by parameters
in KEY + VALUE pairs, and closed with a semmicolon (;).

  A command must be a predefined command as one of the following:
MODE, ACCOUNT, REFERENCE, EVENT, TRANSACTION.

  Each parameter must be a complete KEY VALUE pair.

| COMMAND ARG VALUE ARG2 VALUE2 ... ;
| |      --------- -----------     |
| |        arg 1      arg 2        |
| *--- command keyword    |        *--- closing semicolon
|                         |
|                         *--- arguments in KEY VALUE pairs

Design & prettify

  Each expression must be terminated by a semmicolon (;), but
a single expression can be multi lined, and there can be many spaces
between attribute KEY VALUE pairs. This flexibility can be used to
format expressions by using new lines and spaces.

  An expression can have this single line format:

    TRANSACTION DEBIT 161 CREDIT 38 AMOUNT 1_000;

  Or the same expression can have a multi line format:

    TRANSACTION
      DEBIT   161
      CREDIT  38
      AMOUNR  1_000;

  For a transaction amount value we have a special format condition;
we can use underscore for thousand separation. We can place an underscore
anywhere inside a number, but thousand separation is the main reason.

  The following amount values are the same:

    1000    or  1_000       (pretty)
    1000000 or  1_000_000   (pretty)
    1700    or  170_0       (meaningless)

Comment

  In bit lang there are two kind of comments, block and line
comments. Block comments starts with # character. Line comment
starts with // characters. Currently comments are skipped by
the language parser.

| # Comment first line
| # comment second line
| # ..
| # comment last line

| COMMAND      // Line comment
|   KEY VALUE; // Line comment

Account

  Account definition expression. Mode must be set to account,
and account definitions must be located in the accounts.bit file
specified in config.toml.

| ACCOUNT
|   ID    account id name (STRING)
|   NAME  account name (STRING);

Mode

| MODE set account | balance | profit | transaction;

Reference

| REFERENCE
|   ID      reference id (STRING)
|   NAME    reference name (STRING) // *OPTIONAL*
|   IDATE   issue date (DATE)       // *OPTIONAL*
|   CDATE   completion date (DATE)  // *OPTIONAL*
|   DDATE   due date (DATE);        // *OPTIONAL*

Event

| EVENT
|   REFERENCE_ID  reference id (STRING)
|   NAME          event name (STRING)    // *OPTIONAL*
|   IDATE         issue date (DATE)      // *OPTIONAL*
|   CDATE         completion date (DATE) // *OPTIONAL*
|   DDATE         due date (DATE);       // *OPTIONAL*

Transaction

| TRANSACTION
|   DEBIT     debit id (STRING)
|   CREDIT    credit id (STRING)
|   EVENT_ID  event id (STRING)      // *OPTIONAL*
|   CDATE     completion date (DATE) // *OPTIONAL*
|   AMOUNT    amount value (INT);